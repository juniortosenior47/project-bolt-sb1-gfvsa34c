openapi: 3.0.0
info:
  title: Products Service API
  description: Microservice for managing products
  version: 1.0.0
  contact:
    name: API Support
servers:
  - url: http://localhost:3001
    description: Development server
  - url: http://products-service:3001
    description: Docker internal network

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key for service authentication
  
  schemas:
    Product:
      type: object
      properties:
        type:
          type: string
          example: products
        id:
          type: string
          format: uuid
          example: 550e8400-e29b-41d4-a716-446655440000
        attributes:
          type: object
          properties:
            name:
              type: string
              example: Laptop
            price:
              type: number
              format: float
              minimum: 0
              example: 999.99
            description:
              type: string
              nullable: true
              example: High-performance laptop
            created_at:
              type: string
              format: date-time
            updated_at:
              type: string
              format: date-time

    CreateProduct:
      type: object
      required:
        - name
        - price
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
          example: Laptop
        price:
          type: number
          format: float
          minimum: 0
          example: 999.99
        description:
          type: string
          maxLength: 1000
          example: High-performance laptop

    Error:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              status:
                type: string
                example: "400"
              title:
                type: string
                example: Validation Error
              detail:
                type: string
                example: Name is required

security:
  - ApiKeyAuth: []

paths:
  /health:
    get:
      summary: Health check
      description: Check service health and database connectivity
      security: []
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                  timestamp:
                    type: string
                    format: date-time
                  service:
                    type: string
                    example: products-service
                  version:
                    type: string
                    example: 1.0.0
                  database:
                    type: string
                    example: connected
        '503':
          description: Service is unhealthy

  /api/products:
    get:
      summary: List all products
      description: Retrieve a paginated list of all products
      parameters:
        - name: limit
          in: query
          description: Maximum number of products to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
        - name: offset
          in: query
          description: Number of products to skip
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
                  meta:
                    type: object
                    properties:
                      total:
                        type: integer
                      limit:
                        type: integer
                      offset:
                        type: integer
                      has_more:
                        type: boolean
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      summary: Create a new product
      description: Create a new product with the provided information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProduct'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Product'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/products/{id}:
    get:
      summary: Get product by ID
      description: Retrieve a specific product by its ID
      parameters:
        - name: id
          in: path
          required: true
          description: Product ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'